// Generated by CoffeeScript 1.9.1
(function() {
  var NUM_BARS, Pingr, bars, changeNumBars, clearChildren, currNumBars, elem, hideBars, initElement, num_requests, pingServer, rootDomain, updatePing;

  rootDomain = window.location.origin;

  bars = [];

  NUM_BARS = 4;

  elem = document.getElementById("pingr");

  num_requests = 0;

  currNumBars = 4;

  clearChildren = function() {
    var results;
    results = [];
    while (elem.firstChild) {
      results.push(elem.removeChild(elem.firstChild));
    }
    return results;
  };

  hideBars = function() {
    var i, j, ref, results;
    results = [];
    for (i = j = 1, ref = NUM_BARS; j <= ref; i = j += 1) {
      results.push(bars[i - 1].style.display = "none");
    }
    return results;
  };

  changeNumBars = function(numBars) {
    var i, j, k, ref, ref1, ref2, ref3;
    if (numBars < 0 || numBars > NUM_BARS) {
      return;
    }
    console.log("changing numBars to: " + numBars);
    if (numBars > currNumBars) {
      for (i = j = ref = currNumBars + 1, ref1 = numBars; j <= ref1; i = j += 1) {
        bars[i - 1].style.display = "inline-block";
      }
    } else if (numBars < currNumBars) {
      for (i = k = ref2 = numBars + 1, ref3 = currNumBars; k <= ref3; i = k += 1) {
        bars[i - 1].style.display = "none";
      }
    } else {
      return;
    }
    return currNumBars = numBars;
  };

  initElement = function(width, height) {
    var barHeightIncrement, barWidth, i, j, margin, ref, results, tempDiv;
    clearChildren();
    elem.style['border-radius'] = "5px";
    elem.style.border = "1px solid #9E9E9E";
    elem.style.width = width + "px";
    elem.style.height = height + "px";
    margin = 2;
    if (width < 50) {
      margin = 1;
    }
    barWidth = (width - ((NUM_BARS * 2) * margin)) / 4;
    barHeightIncrement = (height - ((NUM_BARS * 2) * margin)) / 4;
    results = [];
    for (i = j = 1, ref = NUM_BARS; j <= ref; i = j += 1) {
      tempDiv = document.createElement("div");
      tempDiv.style['background-color'] = "#4CAF50";
      tempDiv.style.width = barWidth + "px";
      tempDiv.style.height = (i * barHeightIncrement) + "px";
      tempDiv.style.display = "inline-block";
      tempDiv.style.margin = margin + "px";
      tempDiv.style['margin-top'] = (height - (i * barHeightIncrement)) + "px";
      results.push(bars[i - 1] = elem.appendChild(tempDiv));
    }
    return results;
  };

  updatePing = function(pingTime) {
    console.log("ping time is: " + pingTime);
    if (pingTime === -1) {
      return changeNumBars(0);
    } else {
      if (pingTime > 0 && pingTime <= 150) {
        return changeNumBars(4);
      } else if (pingTime > 150 && pingTime <= 300) {
        return changeNumBars(3);
      } else if (pingTime > 300 && pingTime <= 500) {
        return changeNumBars(2);
      } else {
        return changeNumBars(1);
      }
    }
  };

  pingServer = function(callback) {
    var http, started, url;
    http = new XMLHttpRequest();
    url = rootDomain + "?cachebreaker=" + Date.now();
    http.open("GET", url);
    http.onreadystatechange = function() {
      var ended, pingTime;
      if (http.readyState === 4) {
        if (http.status !== 0) {
          ended = Date.now();
          pingTime = ended - started;
          return callback(pingTime);
        } else {
          return callback(-1);
        }
      }
    };
    started = Date.now();
    http.send(null);
    return num_requests++;
  };

  Pingr = {};

  Pingr.init = function(width, height) {
    var pingCallback;
    initElement(width, height);
    pingCallback = function(pingTime) {
      num_requests--;
      updatePing(pingTime);
      if (pingTime === -1) {
        return setTimeout(pingServer(pingCallback), 1000);
      } else {
        return setTimeout(pingServer(pingCallback), 500);
      }
    };
    return pingServer(pingCallback);
  };

  window.Pingr = Pingr;

}).call(this);
