// Generated by CoffeeScript 1.7.1
(function() {
  var NUM_BARS, bars, changeNumBars, elem, hideBars, init, initElement, pingServer, rootDomain, updatePing;

  rootDomain = window.location.origin;

  bars = [];

  NUM_BARS = 4;

  elem = document.getElementById("pingr");

  hideBars = function() {
    var i, _i, _len, _ref, _results;
    _ref = [1, NUM_BARS];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
      i = _ref[_i];
      _results.push(bars[i - 1].style.display = "none");
    }
    return _results;
  };

  changeNumBars = function(numBars) {
    var i, _i, _len, _ref, _results;
    if (numBars < 0 || numBars > NUM_BARS) {
      return;
    }
    console.log("changing numBars to: " + numBars);
    hideBars();
    _ref = [1, numBars];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
      i = _ref[_i];
      _results.push(bars[i - 1].style.display = "inline-block");
    }
    return _results;
  };

  initElement = function() {
    var i, tempDiv, _i, _results;
    elem.style.display;
    _results = [];
    for (i = _i = 1; _i <= NUM_BARS; i = _i += 1) {
      tempDiv = document.createElement("div");
      tempDiv.style['background-color'] = 'green';
      tempDiv.style.width = '20px';
      tempDiv.style.height = (i * 20) + "px";
      tempDiv.style.display = "inline-block";
      tempDiv.style.margin = "5px";
      _results.push(bars[i - 1] = elem.insertBefore(tempDiv, null));
    }
    return _results;
  };

  updatePing = function(pingTime) {
    console.log("ping time is: " + pingTime);
    if (pingTime === -1) {

    } else {
      if (pingTime > 0 && pingTime <= 150) {
        return changeNumBars(4);
      } else if (pingTime > 150 && pingTime <= 300) {
        return changeNumBars(3);
      } else if (pingTime > 300 && pingTime <= 500) {
        return changeNumBars(2);
      } else {
        return changeNumBars(1);
      }
    }
  };

  pingServer = function(callback) {
    var http, started, url;
    http = new XMLHttpRequest();
    url = rootDomain + "?cachebreaker=" + Date.now();
    http.open("GET", url);
    http.onreadystatechange = function() {
      var ended, pingTime;
      if (http.readyState === 4) {
        if (http.status !== 0) {
          ended = Date.now();
          pingTime = ended - started;
          return callback(pingTime);
        } else {
          return callback(-1);
        }
      }
    };
    started = Date.now();
    return http.send(null);
  };

  init = function() {
    var pingCallback;
    initElement();
    pingCallback = function(pingTime) {
      updatePing(pingTime);
      if (pingTime === -1) {
        return setTimeout(pingServer(pingCallback), 100);
      } else {
        return pingServer(pingCallback);
      }
    };
    return pingServer(pingCallback);
  };

  setTimeout(init, 0);

}).call(this);
